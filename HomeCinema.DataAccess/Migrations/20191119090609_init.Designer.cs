// <auto-generated />
using System;
using HomeCinema.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HomeCinema.DataAccess.Migrations
{
    [DbContext(typeof(HomeCinemaDbContext))]
    [Migration("20191119090609_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HomeCinema.Domain.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Genre")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OriginalId");

                    b.HasKey("Id");

                    b.ToTable("Movie");

                    b.HasData(
                        new { Id = 1, Genre = "Adventure", Name = "Joker", OriginalId = 33 },
                        new { Id = 2, Genre = "Animation", Name = "The Lion King", OriginalId = 34 },
                        new { Id = 3, Genre = "Comedy", Name = "Paracite", OriginalId = 55 }
                    );
                });

            modelBuilder.Entity("HomeCinema.Domain.Models.UserActionMovies", b =>
                {
                    b.Property<int>("UserActionId");

                    b.Property<int>("MovieId");

                    b.HasKey("UserActionId", "MovieId");

                    b.HasAlternateKey("MovieId", "UserActionId");

                    b.ToTable("UserActionMovies");

                    b.HasData(
                        new { UserActionId = 1, MovieId = 1 },
                        new { UserActionId = 2, MovieId = 1 },
                        new { UserActionId = 2, MovieId = 2 },
                        new { UserActionId = 3, MovieId = 2 }
                    );
                });

            modelBuilder.Entity("HomeCinema.Domain.Models.UserActions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserActions");

                    b.HasData(
                        new { Id = 1, Action = 2, UserId = "9624362e-114f-4ed6-8863-aae13c67dfb8" },
                        new { Id = 2, Action = 4, UserId = "9624362e-114f-4ed6-8863-aae13c67dfb8" },
                        new { Id = 3, Action = 3, UserId = "9624362e-114f-4ed6-8863-aae13c67dfb8" }
                    );
                });

            modelBuilder.Entity("HomeCinema.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "45eb17f1-9208-4809-a675-a24396b0c2c4", AccessFailedCount = 0, ConcurrencyStamp = "ec6821ed-59ef-4eea-b57c-224873431d57", Email = "admin@gmail.com", EmailConfirmed = true, FullName = "Administrator", LockoutEnabled = false, NormalizedEmail = "ADMIN@GMAIL.COM", NormalizedUserName = "ADMIN", PasswordHash = "AQAAAAEAACcQAAAAEO/6O1MINxXRNQgT5deAABCqdEYlQyQdgFFmmV27Yxjqi2Lk5odRCSbs2uR1w5M1Nw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin" },
                        new { Id = "9624362e-114f-4ed6-8863-aae13c67dfb8", AccessFailedCount = 0, ConcurrencyStamp = "fd444d85-a2a0-4063-a048-3d287ebdb7dc", Email = "mariche@gmail.com", EmailConfirmed = true, FullName = "Marija Prosheva", LockoutEnabled = false, NormalizedEmail = "MARICHE@GMAIL.COM", NormalizedUserName = "MARICHE", PasswordHash = "AQAAAAEAACcQAAAAEIdwc9/yDMglU9kMZOVC0KXYIpFDaVLWyDCwJwQ5Y3DcSjjHlY5qxNFyL8oLR3mFGA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "mariche" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "6ab343a0-d1e1-4d83-8078-29a49f600d1c", ConcurrencyStamp = "bba516ce-8ced-4b49-8a07-d57a3323cc26", Name = "admin", NormalizedName = "ADMIN" },
                        new { Id = "3e03146a-6a69-452a-8290-162ecee14bec", ConcurrencyStamp = "0f4135cc-6470-4d16-b16b-a52112d110e3", Name = "user", NormalizedName = "USER" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "45eb17f1-9208-4809-a675-a24396b0c2c4", RoleId = "6ab343a0-d1e1-4d83-8078-29a49f600d1c" },
                        new { UserId = "9624362e-114f-4ed6-8863-aae13c67dfb8", RoleId = "3e03146a-6a69-452a-8290-162ecee14bec" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HomeCinema.Domain.Models.UserActionMovies", b =>
                {
                    b.HasOne("HomeCinema.Domain.Models.Movie", "Movie")
                        .WithMany("UserActionMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeCinema.Domain.Models.UserActions", "UserActions")
                        .WithMany("UserActionMovies")
                        .HasForeignKey("UserActionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeCinema.Domain.Models.UserActions", b =>
                {
                    b.HasOne("HomeCinema.Domain.User", "User")
                        .WithMany("UserActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HomeCinema.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HomeCinema.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeCinema.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HomeCinema.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
